layers = [
    MemoryDataLayer(name="data", tops=[:data], batch_size=batch_size,
                    transformers=[(:data, DataTransformers.Scale(scale=255)), (:data, DataTransformers.SubMean(mean_file="/home/sbhle/Mocha.jl/examples/ijulia/ilsvrc12/model/ilsvrc12_mean.hdf5"))],
                    data = Array[zeros(img_width, img_height, img_channels, batch_size)])
    CropLayer(name="crop", tops=[:cropped], bottoms=[:data], crop_size=crop_size)
    ConvolutionLayer(name="conv1_1", tops=[:conv1_1], bottoms=[:cropped], kernel=(3,3), pad=(1,1), n_filter=64, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv1_2", tops=[:conv1_2], bottoms=[:conv1_1], kernel=(3,3), pad=(1,1), n_filter=64, neuron=Neurons.ReLU())
    PoolingLayer(name="pool1", tops=[:pool1], bottoms=[:conv1_2], kernel=(2,2), stride=(2,2), pooling=Pooling.Max())
    ConvolutionLayer(name="conv2_1", tops=[:conv2_1], bottoms=[:pool1], kernel=(3,3), pad=(1,1), n_filter=128, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv2_2", tops=[:conv2_2], bottoms=[:conv2_1], kernel=(3,3), pad=(1,1), n_filter=128, neuron=Neurons.ReLU())
    PoolingLayer(name="pool2", tops=[:pool2], bottoms=[:conv2_2], kernel=(2,2), stride=(2,2), pooling=Pooling.Max())
    ConvolutionLayer(name="conv3_1", tops=[:conv3_1], bottoms=[:pool2], kernel=(3,3), pad=(1,1), n_filter=256, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv3_2", tops=[:conv3_2], bottoms=[:conv3_1], kernel=(3,3), pad=(1,1), n_filter=256, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv3_3", tops=[:conv3_3], bottoms=[:conv3_2], kernel=(3,3), pad=(1,1), n_filter=256, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv3_4", tops=[:conv3_4], bottoms=[:conv3_3], kernel=(3,3), pad=(1,1), n_filter=256, neuron=Neurons.ReLU())
    PoolingLayer(name="pool3", tops=[:pool3], bottoms=[:conv3_4], kernel=(2,2), stride=(2,2), pooling=Pooling.Max())
    ConvolutionLayer(name="conv4_1", tops=[:conv4_1], bottoms=[:pool3], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv4_2", tops=[:conv4_2], bottoms=[:conv4_1], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv4_3", tops=[:conv4_3], bottoms=[:conv4_2], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv4_4", tops=[:conv4_4], bottoms=[:conv4_3], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    PoolingLayer(name="pool4", tops=[:pool4], bottoms=[:conv4_4], kernel=(2,2), stride=(2,2), pooling=Pooling.Max())
    ConvolutionLayer(name="conv5_1", tops=[:conv5_1], bottoms=[:pool4], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv5_2", tops=[:conv5_2], bottoms=[:conv5_1], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv5_3", tops=[:conv5_3], bottoms=[:conv5_2], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    ConvolutionLayer(name="conv5_4", tops=[:conv5_4], bottoms=[:conv5_3], kernel=(3,3), pad=(1,1), n_filter=512, neuron=Neurons.ReLU())
    PoolingLayer(name="pool5", tops=[:pool5], bottoms=[:conv5_4], kernel=(2,2), stride=(2,2), pooling=Pooling.Max())
    InnerProductLayer(name="fc6", tops=[:fc6], bottoms=[:pool5], output_dim=4096, neuron=Neurons.ReLU())
    DropoutLayer(name="drop6", bottoms=[:fc6], ratio=0.5)
    InnerProductLayer(name="fc7", tops=[:fc7], bottoms=[:fc6], output_dim=4096, neuron=Neurons.ReLU())
    DropoutLayer(name="drop7", bottoms=[:fc7], ratio=0.5)
    InnerProductLayer(name="fc8", tops=[:fc8], bottoms=[:fc7], output_dim=1000)
    SoftmaxLayer(name="prob", tops=[:prob], bottoms=[:fc8])
]
